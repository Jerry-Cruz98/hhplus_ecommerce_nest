name: 'Migrate Secrets: GitHub to GCP'

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  GCP_PROJECT_ID: 'everlab-secrets'
  GCP_WORKLOAD_IDENTITY_PROVIDER: 'projects/670325066591/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
  GCP_SERVICE_ACCOUNT: 'github-secrets-migrator-sa@everlab-secrets.iam.gserviceaccount.com'

jobs:
  migrate-secrets:
    name: Migrate GitHub Secrets to GCP Secret Manager
    runs-on: ubuntu-latest

    env:
      LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
      LINEAR_CLIENT_ID: ${{ secrets.LINEAR_CLIENT_ID }}
      LINEAR_CLIENT_SECRET: ${{ secrets.LINEAR_CLIENT_SECRET }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      CLOUDFLARE_ORG: ${{ secrets.CLOUDFLARE_ORG }}
      CLOUDFLARE_CLIENT_ID: ${{ secrets.CLOUDFLARE_CLIENT_ID}}
      CLOUDFLARE_CLIENT_SECRET: ${{ secrets.CLOUDFLARE_CLIENT_SECRET }}
      TF_VAR_PATIENT_CLERK_SECRET_KEY: ${{ secrets.TF_VAR_PATIENT_CLERK_SECRET_KEY }}
      COPILOT_CHROME_EXTENSION_PRIVATE_KEY: ${{ secrets.COPILOT_CHROME_EXTENSION_PRIVATE_KEY }}
      PULUMI_CLOUDFLARE_API_TOKEN: ${{ secrets.PULUMI_CLOUDFLARE_API_TOKEN }}
      PULUMI_APP_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_APP_CONFIG_PASSPHRASE }}
      PULUMI_CICD_GOOGLE_CREDENTIALS: ${{ secrets.PULUMI_CICD_GOOGLE_CREDENTIALS }}
      TF_VAR_DATABASE_PASSWORD: ${{ secrets.TF_VAR_DATABASE_PASSWORD}}
      TF_VAR_DATABASE_USER: ${{ secrets.TF_VAR_DATABASE_USER }}
      TF_VAR_DATABASE_NAME: ${{ secrets.TF_VAR_DATABASE_NAME }}
      DB_READONLY_USER_PASSWORD: ${{ secrets.DB_READONLY_USER_PASSWORD }}
      TF_VAR_PMS_CLERK_SECRET_KEY: ${{ secrets.TF_VAR_PMS_CLERK_SECRET_KEY }}
      TF_VAR_JOBS_CLERK_SECRET_KEY: ${{ secrets.TF_VAR_JOBS_CLERK_SECRET_KEY }}
      TF_VAR_JOBS_CLERK_PUBLISHABLE_KEY: ${{ secrets.TF_VAR_JOBS_CLERK_PUBLISHABLE_KEY }}
      TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
      TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
      TF_VAR_OPENAI_API_KEY: ${{ secrets.TF_VAR_OPENAI_API_KEY }}
      TF_VAR_STRIPE_PUBLISHABLE_KEY: ${{ secrets.TF_VAR_STRIPE_PUBLISHABLE_KEY }}
      TF_VAR_STRIPE_SECRET_KEY: ${{ secrets.TF_VAR_STRIPE_SECRET_KEY }}
      TF_VAR_STRIPE_WEBHOOK_SECRET: ${{ secrets.TF_VAR_STRIPE_WEBHOOK_SECRET }}
      TF_VAR_STRIPE_WEBHOOK_SECRET_INNGEST: ${{ secrets.TF_VAR_STRIPE_WEBHOOK_SECRET_INNGEST }}
      TF_VAR_TYPEFORM_SECRET: ${{ secrets.TF_VAR_TYPEFORM_SECRET }}
      TF_VAR_CALENDLY_API_KEY: ${{ secrets.TF_VAR_CALENDLY_API_KEY }}
      TF_VAR_CAL_API_KEY: ${{ secrets.TF_VAR_CAL_API_KEY }}
      TF_VAR_CAL_SECRET_KEY: ${{ secrets.TF_VAR_CAL_SECRET_KEY }}
      TF_VAR_DEXA_PROCESSOR_ID: ${{ secrets.TF_VAR_DEXA_PROCESSOR_ID }}
      OCR_PROCESSOR_ID: ${{ secrets.OCR_PROCESSOR_ID }}
      TF_VAR_CLAUDE_API_KEY: ${{ secrets.TF_VAR_CLAUDE_API_KEY }}
      TF_VAR_AWS_PATHOLOGY_BUCKET: ${{ secrets.TF_VAR_AWS_PATHOLOGY_BUCKET }}
      TF_VAR_TWILIO_ACCOUNT_SID: ${{ secrets.TF_VAR_TWILIO_ACCOUNT_SID }}
      TF_VAR_TWILIO_AUTH_TOKEN: ${{ secrets.TF_VAR_TWILIO_AUTH_TOKEN }}
      TF_VAR_CALENDLY_WEBHOOK_SIGNING_KEY: ${{ secrets.TF_VAR_CALENDLY_WEBHOOK_SIGNING_KEY }}
      TF_VAR_CLERK_WEBHOOK_SECRET: ${{ secrets.TF_VAR_CLERK_WEBHOOK_SECRET }}
      TF_VAR_AIRTABLE_KEY: ${{ secrets.TF_VAR_AIRTABLE_KEY }}
      TF_VAR_AWS_KEY: ${{ secrets.TF_VAR_AWS_KEY }}
      TF_VAR_AWS_SECRET: ${{ secrets.TF_VAR_AWS_SECRET }}
      TF_VAR_PATIENT_CLERK_PUBLISHABLE_KEY_NEW: ${{ secrets.TF_VAR_PATIENT_CLERK_PUBLISHABLE_KEY_NEW }}
      TF_VAR_PMS_CLERK_PUBLISHABLE_KEY: ${{ secrets.TF_VAR_PMS_CLERK_PUBLISHABLE_KEY }}
      TF_VAR_INNGEST_SIGNING_KEY: ${{ secrets.TF_VAR_INNGEST_SIGNING_KEY }}
      TF_VAR_INNGEST_EVENT_KEY: ${{ secrets.TF_VAR_INNGEST_EVENT_KEY }}
      TF_VAR_INNGEST_ENV: ${{ secrets.TF_VAR_INNGEST_ENV }}
      TF_VAR_INNGEST_DEV: ${{ secrets.TF_VAR_INNGEST_DEV }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      VELLUM_API_KEY: ${{ secrets.VELLUM_API_KEY }}
      SYNTHESIA_API_KEY: ${{ secrets.SYNTHESIA_API_KEY }}
      SYNTHESIA_WEBHOOK_SECRET: ${{ secrets.SYNTHESIA_WEBHOOK_SECRET }}
      CONSULT_CLERK_SECRET_KEY: ${{ secrets.CONSULT_CLERK_SECRET_KEY }}
      CONSULT_CLERK_PUBLISHABLE_KEY: ${{ secrets.CONSULT_CLERK_PUBLISHABLE_KEY }}
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      SES_EVENT_INNGEST_WEBHOOK_SECRET: ${{ secrets.SES_EVENT_INNGEST_WEBHOOK_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP using WIF
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Dry-run Secret Migration with suffix fallback
        run: |
          for var in $(env | cut -d= -f1); do
            base="${var}"
            val="${!var}"
            if [[ "$base" =~ ^TF_VAR_ || "$base" =~ _KEY$ || "$base" =~ _TOKEN$ || "$base" =~ _SECRET$ ]]; then
              export "${base}_STAGING=$val"
              export "${base}_PROD=$val"
            fi
          done

          declare -a secret_names=(
            "LINEAR_API_KEY"
            "LINEAR_CLIENT_ID"
            "LINEAR_CLIENT_SECRET"
            "SLACK_WEBHOOK_URL"
            "CLOUDFLARE_ORG_STAGING"
            "CLOUDFLARE_CLIENT_ID_STAGING"
            "CLOUDFLARE_CLIENT_SECRET_STAGING"
            "TF_VAR_PATIENT_CLERK_SECRET_KEY_STAGING"
            "TF_VAR_PATIENT_CLERK_SECRET_KEY_PROD"
            "COPILOT_CHROME_EXTENSION_PRIVATE_KEY_PROD"
            "PULUMI_CLOUDFLARE_API_TOKEN_STAGING"
            "PULUMI_CLOUDFLARE_API_TOKEN_PROD"
            "PULUMI_APP_CONFIG_PASSPHRASE_STAGING"
            "PULUMI_APP_CONFIG_PASSPHRASE_PROD"
            "PULUMI_CICD_GOOGLE_CREDENTIALS_STAGING"
            "PULUMI_CICD_GOOGLE_CREDENTIALS_PROD"
            "TF_VAR_DATABASE_PASSWORD_STAGING"
            "TF_VAR_DATABASE_PASSWORD_PROD"
            "TF_VAR_DATABASE_USER_STAGING"
            "TF_VAR_DATABASE_USER_PROD"
            "TF_VAR_DATABASE_NAME_STAGING"
            "TF_VAR_DATABASE_NAME_PROD"
            "DB_READONLY_USER_PASSWORD_STAGING"
            "DB_READONLY_USER_PASSWORD_PROD"
            "TF_VAR_PMS_CLERK_SECRET_KEY_STAGING"
            "TF_VAR_PMS_CLERK_SECRET_KEY_PROD"
            "TF_VAR_JOBS_CLERK_SECRET_KEY_STAGING"
            "TF_VAR_JOBS_CLERK_SECRET_KEY_PROD"
            "TF_VAR_JOBS_CLERK_PUBLISHABLE_KEY_STAGING"
            "TF_VAR_JOBS_CLERK_PUBLISHABLE_KEY_PROD"
            "TF_VAR_AWS_ACCESS_KEY_ID_STAGING"
            "TF_VAR_AWS_ACCESS_KEY_ID_PROD"
            "TF_VAR_AWS_SECRET_ACCESS_KEY_STAGING"
            "TF_VAR_AWS_SECRET_ACCESS_KEY_PROD"
            "TF_VAR_OPENAI_API_KEY_STAGING"
            "TF_VAR_OPENAI_API_KEY_PROD"
            "TF_VAR_STRIPE_PUBLISHABLE_KEY_STAGING"
            "TF_VAR_STRIPE_PUBLISHABLE_KEY_PROD"
            "TF_VAR_STRIPE_SECRET_KEY_STAGING"
            "TF_VAR_STRIPE_SECRET_KEY_PROD"
            "TF_VAR_STRIPE_WEBHOOK_SECRET_STAGING"
            "TF_VAR_STRIPE_WEBHOOK_SECRET_PROD"
            "TF_VAR_STRIPE_WEBHOOK_SECRET_INNGEST_STAGING"
            "TF_VAR_STRIPE_WEBHOOK_SECRET_INNGEST_PROD"
            "TF_VAR_TYPEFORM_SECRET_STAGING"
            "TF_VAR_TYPEFORM_SECRET_PROD"
            "TF_VAR_CALENDLY_API_KEY_STAGING"
            "TF_VAR_CALENDLY_API_KEY_PROD"
            "TF_VAR_CAL_API_KEY_STAGING"
            "TF_VAR_CAL_API_KEY_PROD"
            "TF_VAR_CAL_SECRET_KEY_STAGING"
            "TF_VAR_CAL_SECRET_KEY_PROD"
            "TF_VAR_DEXA_PROCESSOR_ID_STAGING"
            "TF_VAR_DEXA_PROCESSOR_ID_PROD"
            "OCR_PROCESSOR_ID_STAGING"
            "OCR_PROCESSOR_ID_PROD"
            "TF_VAR_CLAUDE_API_KEY_STAGING"
            "TF_VAR_CLAUDE_API_KEY_PROD"
            "TF_VAR_AWS_PATHOLOGY_BUCKET_STAGING"
            "TF_VAR_AWS_PATHOLOGY_BUCKET_PROD"
            "TF_VAR_TWILIO_ACCOUNT_SID_STAGING"
            "TF_VAR_TWILIO_ACCOUNT_SID_PROD"
            "TF_VAR_TWILIO_AUTH_TOKEN_STAGING"
            "TF_VAR_TWILIO_AUTH_TOKEN_PROD"
            "TF_VAR_CALENDLY_WEBHOOK_SIGNING_KEY_STAGING"
            "TF_VAR_CALENDLY_WEBHOOK_SIGNING_KEY_PROD"
            "TF_VAR_CLERK_WEBHOOK_SECRET_STAGING"
            "TF_VAR_CLERK_WEBHOOK_SECRET_PROD"
            "TF_VAR_AIRTABLE_KEY_STAGING"
            "TF_VAR_AIRTABLE_KEY_PROD"
            "TF_VAR_AWS_KEY_STAGING"
            "TF_VAR_AWS_KEY_PROD"
            "TF_VAR_AWS_SECRET_STAGING"
            "TF_VAR_AWS_SECRET_PROD"
            "TF_VAR_PATIENT_CLERK_PUBLISHABLE_KEY_NEW_STAGING"
            "TF_VAR_PATIENT_CLERK_PUBLISHABLE_KEY_NEW_PROD"
            "TF_VAR_PMS_CLERK_PUBLISHABLE_KEY_STAGING"
            "TF_VAR_PMS_CLERK_PUBLISHABLE_KEY_PROD"
            "TF_VAR_INNGEST_SIGNING_KEY_STAGING"
            "TF_VAR_INNGEST_SIGNING_KEY_PROD"
            "TF_VAR_INNGEST_EVENT_KEY_STAGING"
            "TF_VAR_INNGEST_EVENT_KEY_PROD"
            "TF_VAR_INNGEST_ENV_STAGING"
            "TF_VAR_INNGEST_ENV_PROD"
            "TF_VAR_INNGEST_DEV_STAGING"
            "TF_VAR_INNGEST_DEV_PROD"
            "ANTHROPIC_API_KEY_STAGING"
            "ANTHROPIC_API_KEY_PROD"
            "VELLUM_API_KEY_STAGING"
            "VELLUM_API_KEY_PROD"
            "SYNTHESIA_API_KEY_STAGING"
            "SYNTHESIA_API_KEY_PROD"
            "SYNTHESIA_WEBHOOK_SECRET_STAGING"
            "SYNTHESIA_WEBHOOK_SECRET_PROD"
            "CONSULT_CLERK_SECRET_KEY_STAGING"
            "CONSULT_CLERK_SECRET_KEY_PROD"
            "CONSULT_CLERK_PUBLISHABLE_KEY_STAGING"
            "CONSULT_CLERK_PUBLISHABLE_KEY_PROD"
            "DD_API_KEY_STAGING"
            "DD_API_KEY_PROD"
            "SES_EVENT_INNGEST_WEBHOOK_SECRET_STAGING"
            "SES_EVENT_INNGEST_WEBHOOK_SECRET_PROD"
          )

          missing=()
              for secret in "${secret_names[@]}"; do
                val="${!secret:-}"
                if [[ -z "$val" ]]; then
                  echo "❌ MISSING: $secret (no value)"
                  missing+=("$secret")
                  continue
                fi
                clean=$(echo "$secret" | sed 's/^TF_VAR_//' | tr '[:upper:]' '[:lower:]')
                [[ "$clean" =~ _staging$ ]] && clean="${clean/_staging/-staging}"
                [[ "$clean" =~ _prod$ ]] && clean="${clean/_prod/-prod}"
                echo "✅ Would create GCP secret: $clean (from $secret)"
          done

            # Uncomment this block to actually create and upload secrets
            # echo "$val" | gcloud secrets create "$clean_name" \
            #   --project="${GCP_PROJECT_ID}" \
            #   --replication-policy="automatic" \
            #   --labels="migrated-from=github,migration-date=$(date +%F)" 2>/dev/null || true

            # echo "$val" | gcloud secrets versions add "$clean_name" \  
            #   --project="${GCP_PROJECT_ID}" \
            #   --data-file=-
          # done

          if [[ ${#missing[@]} -gt 0 ]]; then
            echo -e "\n==== MISSING SECRETS ===="
            for m in "${missing[@]}"; do echo "❌ $m"; done
            echo "Total missing: ${#missing[@]}"
            exit 1
          else
            echo -e "\n✅ All secrets have values."
          fi
